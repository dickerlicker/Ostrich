# Generated by Django 2.0.7 on 2018-08-08 01:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FakeRange',
            fields=[
                ('rangeid', models.AutoField(db_column='rangeID', primary_key=True, serialize=False)),
                ('rangename', models.CharField(db_column='rangeName', max_length=45)),
                ('rangeactive', models.BooleanField(db_column='rangeActive', default=False)),
                ('datecreated', models.DateField(blank=True, db_column='dateCreated', null=True)),
                ('datestart', models.DateField(blank=True, db_column='dateStart', null=True)),
                ('timestart', models.TimeField(blank=True, db_column='timeStart', null=True)),
                ('dateend', models.DateField(blank=True, db_column='dateEnd', null=True)),
                ('timeend', models.TimeField(blank=True, db_column='timeEnd', null=True)),
                ('maxscore', models.PositiveIntegerField(blank=True, db_column='maxScore', default=0, null=True)),
                ('lastmodifieddate', models.DateField(blank=True, db_column='lastModifiedDate', null=True)),
                ('rangecode', models.IntegerField(blank=True, db_column='rangeCode', null=True, unique=True)),
                ('rangeurl', models.CharField(db_column='rangeURL', max_length=50, null=True, unique=True)),
                ('studentsinrange', models.PositiveIntegerField(db_column='studentsInRange', default=0, null=True)),
                ('isdisabled', models.BooleanField(db_column='isDisabled', default=False)),
                ('isopen', models.BooleanField(db_column='isOpen', default=False)),
                ('rangeinfo', tinymce.models.HTMLField(db_column='rangeInfo', default='')),
                ('attempts', models.PositiveIntegerField(db_column='attempts', default=0)),
                ('manualactive', models.BooleanField(db_column='manualactive', default=0)),
                ('manualdeactive', models.BooleanField(db_column='manualdeactive', default=0)),
            ],
            options={
                'managed': False,
                'db_table': 'Range',
            },
        ),
        migrations.CreateModel(
            name='MCQOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('optionone', models.CharField(db_column='OptionOne', max_length=100)),
                ('optiontwo', models.CharField(db_column='OptionTwo', max_length=100)),
                ('optionthree', models.CharField(db_column='OptionThree', max_length=100)),
                ('optionfour', models.CharField(db_column='OptionFour', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'MCQOptions',
                'db_table': 'MCQOptions',
            },
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('questionid', models.AutoField(db_column='questionID', primary_key=True, serialize=False)),
                ('questiontype', models.CharField(choices=[('FL', 'Flag'), ('MCQ', 'Multiple Choice'), ('SA', 'Short Answer'), ('OE', 'Open Ended'), ('TF', 'True/False')], db_column='questiontype', default='FL', max_length=100)),
                ('title', models.CharField(db_column='questiontitle', max_length=255, null=True)),
                ('text', tinymce.models.HTMLField(db_column='questiontext', default='')),
                ('hint', models.TextField(db_column='hint')),
                ('hintpenalty', models.PositiveIntegerField(db_column='hintpenalty', default=0)),
                ('datecreated', models.DateTimeField(blank=True, db_column='dateCreated', null=True)),
                ('points', models.PositiveIntegerField(db_column='points', default=0)),
                ('answer', models.TextField(db_column='answer', null=True)),
                ('usedocker', models.BooleanField(db_column='usedocker', default=False)),
                ('registryid', models.CharField(db_column='registryID', max_length=255, null=True)),
                ('isarchived', models.BooleanField(db_column='isArchived', default=False)),
                ('remarks', models.CharField(db_column='remarks', max_length=255, null=True)),
                ('createdby', models.ForeignKey(db_column='createdby', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questioncreatedby', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Questions',
                'ordering': ['-questionid'],
                'db_table': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='QuestionTopic',
            fields=[
                ('topicid', models.AutoField(db_column='topicid', primary_key=True, serialize=False)),
                ('topicname', models.CharField(db_column='topicname', max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'QuestionTopics',
                'db_table': 'QuestionTopic',
            },
        ),
        migrations.CreateModel(
            name='Range',
            fields=[
                ('rangeid', models.AutoField(db_column='rangeID', primary_key=True, serialize=False)),
                ('rangename', models.CharField(db_column='rangeName', max_length=45)),
                ('rangeactive', models.BooleanField(db_column='rangeActive', default=False)),
                ('datecreated', models.DateField(blank=True, db_column='dateCreated', null=True)),
                ('datestart', models.DateField(blank=True, db_column='dateStart', null=True)),
                ('timestart', models.TimeField(blank=True, db_column='timeStart', null=True)),
                ('dateend', models.DateField(blank=True, db_column='dateEnd', null=True)),
                ('timeend', models.TimeField(blank=True, db_column='timeEnd', null=True)),
                ('maxscore', models.PositiveIntegerField(blank=True, db_column='maxScore', default=0, null=True)),
                ('lastmodifieddate', models.DateField(blank=True, db_column='lastModifiedDate', null=True)),
                ('rangecode', models.IntegerField(blank=True, db_column='rangeCode', null=True, unique=True)),
                ('rangeurl', models.CharField(db_column='rangeURL', max_length=50, null=True, unique=True)),
                ('studentsinrange', models.PositiveIntegerField(db_column='studentsInRange', default=0, null=True)),
                ('isdisabled', models.BooleanField(db_column='isDisabled', default=False)),
                ('isopen', models.BooleanField(db_column='isOpen', default=False)),
                ('rangeinfo', tinymce.models.HTMLField(db_column='rangeInfo', default='')),
                ('attempts', models.PositiveIntegerField(db_column='attempts', default=0)),
                ('manualactive', models.BooleanField(db_column='manualactive', default=0)),
                ('manualdeactive', models.BooleanField(db_column='manualdeactive', default=0)),
                ('createdby', models.ForeignKey(db_column='createdby', default='super', on_delete=django.db.models.deletion.CASCADE, related_name='CBR', to=settings.AUTH_USER_MODEL)),
                ('lastmodifiedby', models.ForeignKey(blank=True, db_column='lastModifiedBy', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='LMBR', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Ranges',
                'ordering': ['-rangeid'],
                'db_table': 'Range',
            },
        ),
        migrations.CreateModel(
            name='RangeStudents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateJoined', models.DateTimeField(blank=True, db_column='dateJoined', max_length=45, null=True)),
                ('points', models.IntegerField(db_column='points', default=0)),
                ('datecompleted', models.DateTimeField(db_column='datecompleted', null=True)),
                ('lastaccess', models.DateTimeField(db_column='lastaccess', null=True)),
                ('groupid', models.ForeignKey(blank=True, db_column='groupid', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.Group')),
                ('rangeID', models.ForeignKey(db_column='rangeID', on_delete=django.db.models.deletion.CASCADE, to='ranges.Range')),
                ('studentID', models.ForeignKey(db_column='email', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'RangeStudents',
                'db_table': 'RangeStudents',
            },
        ),
        migrations.CreateModel(
            name='StudentHints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hintactivated', models.BooleanField(db_column='hintactivated', default=False)),
                ('questionid', models.ForeignKey(db_column='questionid', on_delete=django.db.models.deletion.CASCADE, to='ranges.Questions')),
                ('rangeid', models.ForeignKey(db_column='rangeid', on_delete=django.db.models.deletion.CASCADE, to='ranges.Range')),
                ('studentid', models.ForeignKey(db_column='studentid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'StudentHints',
                'db_table': 'StudentHints',
            },
        ),
        migrations.CreateModel(
            name='StudentQuestions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answergiven', models.TextField(db_column='answergiven', null=True)),
                ('answercorrect', models.BooleanField(db_column='right/wrong', default=False)),
                ('marksawarded', models.PositiveIntegerField(db_column='marksawarded', default=0)),
                ('attempts', models.PositiveIntegerField(db_column='attempts', default=1)),
                ('ismarked', models.BooleanField(db_column='ismarked', default=False)),
                ('questionid', models.ForeignKey(db_column='questionid', on_delete=django.db.models.deletion.CASCADE, to='ranges.Questions')),
                ('rangeid', models.ForeignKey(db_column='rangeID', on_delete=django.db.models.deletion.CASCADE, to='ranges.Range')),
                ('studentid', models.ForeignKey(db_column='email', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'StudentQuestions',
                'db_table': 'StudentQuestions',
            },
        ),
        migrations.CreateModel(
            name='UnavailablePorts',
            fields=[
                ('portnumber', models.PositiveIntegerField(db_column='portNumber', primary_key=True, serialize=False)),
                ('containername', models.TextField(db_column='containerName', null=True)),
                ('datetimecreated', models.DateTimeField(db_column='dateTimeCreated', null=True)),
                ('studentid', models.ForeignKey(db_column='studentid', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'UnavailablePorts',
                'ordering': ['-portnumber'],
                'db_table': 'UnavailablePorts',
            },
        ),
        migrations.AddField(
            model_name='questions',
            name='rangeid',
            field=models.ForeignKey(db_column='rangeid', null=True, on_delete=django.db.models.deletion.CASCADE, to='ranges.Range'),
        ),
        migrations.AddField(
            model_name='questions',
            name='topicid',
            field=models.ForeignKey(db_column='topicid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='catid', to='ranges.QuestionTopic'),
        ),
        migrations.AddField(
            model_name='mcqoptions',
            name='questionid',
            field=models.OneToOneField(db_column='questionid', on_delete=django.db.models.deletion.CASCADE, to='ranges.Questions'),
        ),
    ]
